create database cset180final;
use cset180final;

create table users (
	user_id int primary key auto_increment,
	username varchar(255) unique not null,
    first_name varchar(255) not null,
    last_name varchar(255) not null,
    email varchar(255) unique not null,
	password varchar(255) not null,
    user_type enum('admin', 'vendor', 'customer') not null
);

select * from users;
select * from products;
select * from product_variants;
select * from cart;
select sum(cart.quantity * product_variants.price) from cart natural join product_variants;
select distinct * from product_variants cross join products cross join users where users.user_type='vendor';
select product_variants.price, products.title, products.category, products.description, products.product_id from cart join product_variants on cart.variant_id = product_variants.variant_id join products on product_variants.product_id = products.product_id where cart.user_id = 1;
create table products(
	product_id int primary key auto_increment,
    vendor_id int not null,
    category varchar(255) not null,
    title varchar(255) not null,
    description varchar(255) not null,
    foreign key(vendor_id) references users(user_id)
);

create table product_variants (
	variant_id int primary key auto_increment,
    product_id int not null,
    price decimal(10,2),
    discounted_price decimal(10,2) default null,
    discount_over_date date default null,
    product_img varchar(10000) not null,
    color varchar(255) not null,
    size varchar(255) not null,
    inventory int not null,
    stock_status enum('in stock', 'out of stock') not null,
    foreign key (product_id) references products(product_id)    
);

create table cart(
	user_id int not null,
    variant_id int not null,
    quantity int not null,
    foreign key(user_id) references users(user_id),
    foreign key(variant_id) references product_variants(variant_id)
);
select * from shipping_address;

create table shipping_address (
	address_id int not null primary key auto_increment,
	user_id int not null,
    name varchar(255) not null,
    phone_number varchar(255) not null,
    street_address varchar(255) not null,
    city varchar(255) not null,
    state varchar(255) not null,
    zip_code varchar(255) not null,
    country varchar(255) not null,
    is_default enum('Yes', 'No'),
    foreign key (user_id) references users(user_id)
);

create table orders (
	order_id int primary key auto_increment,
    user_id int not null,
    order_date date not null,
    total decimal(10,2) not null,
    status enum('pending', 'shipped', 'delivered') not null,
    foreign key (user_id) REFERENCES users(user_id)
);
-- not sure if need orders and order_items decide later 
create table order_items (
	order_id  int not null,
    variant_id int not null,
    foreign key (order_id) references orders(order_id),
    foreign key (variant_id) references prudct_variants(variant_id)
);

-- not sure if review should be for variant or product decide later 
create table reviews(
	review_id int primary key auto_increment,
    customer_id int not null,
    product_id int not null,
    rating int not null,
    description varchar(255) not null,
    date date not null,
    foreign key(customer_id) references users(user_id),
    foreign key(product_id) references products(product_id)
);

create table complaints(
	complaint_id int primary key auto_increment,
    status enum('pending', 'rejected', 'confirmed', 'processing', 'complete') not null,
    date date not null,
    title varchar(255) not null,
    user_id int not null,
    order_id int not null,
    demands enum('return', 'refund', 'warranty claim') not null,
    product_id int not null,
    variant_id int not null,
    settled_by int not null,
    foreign key (user_id) references users(user_id),
    foreign key (settled_by) references users(user_id),
    foreign key (order_id) references orders(order_id),
    foreign key (product_id) references products(product_id),
    foreign key (variant_id) references product_variants(variant_id)
);

create table chat(
	chat_id int primary key auto_increment,
    sender_id int not null,
    receiver_id int not null,
    message varchar(255) not null,
    Datetime datetime not null,
    foreign key(sender_id) references users(user_id),
    foreign key(receiver_id) references users(user_id)
);
